# -*- coding: utf-8 -*-
"""Copy of dddd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Eg4cD0ov3XNS7sU4WvsNWS_3MEqxubx
"""

# %matplotlib inline

import networkx as nx
import matplotlib.pyplot as plt
import math
import matplotlib.colors as mcolors

print (nx.info(G))

G=nx.read_edgelist('mahanat.txt')

def draw(G, pos, measures, measure_name):
    
    nodes = nx.draw_networkx_nodes(G, pos, node_size=30, cmap=plt.cm.plasma, 
                                   node_color=measures.values(),
                                   nodelist=measures.keys())
    nodes.set_norm(mcolors.SymLogNorm(linthresh=0.01, linscale=1))
    
    # labels = nx.draw_networkx_labels(G, pos)
    edges = nx.draw_networkx_edges(G, pos)

    plt.title(measure_name)
    plt.colorbar(nodes)
    plt.axis('off')
    plt.show()

pos = nx.spring_layout(G)
my_graph=nx.DiGraph();
my_graph.add_edges_from(G.edges())

d=nx.degree_centrality(G)
print(d)
#draw(my_graph, pos=none, nx.degree_centrality(my_graph), 'Degree of  Centrality')



d=nx.in_degree_centrality(my_graph)
print(d)
draw(my_graph, pos, d, 'Degree of Incentrality')

d=nx.out_degree_centrality(my_graph)
print(d)
draw(my_graph, pos,d, 'Degree of Outcentrality')

"""### Eigen Vector Centrality
indegree and outdegree ka different
"""

e= nx.eigenvector_centrality(G)
print(e)

nx.draw(G)
plt.show(G)

"""### Katz centrality"""

phi = (1+math.sqrt(5))/2.0
k = nx.katz_centrality_numpy(G,1/phi-0.01)

for n,c in sorted(k.items()): 
    print(n,c)

"""### Betweeness centrality"""

b=nx.betweenness_centrality(G)
print(b)



"""### Closeness centrality"""

c=nx.closeness_centrality(G) 
print(c)

"""### Group Centrality"""



"""### Clustering Coefficient"""

cc=nx.average_clustering(G) 
print(cc)

nx.reciprocity(G, nodes=None)

"""### Overall reciprocity

## Transitivity
"""

t=nx.transitivity(G)
print(t)

draw(my_graph, pos, nx.in_degree_centrality(my_graph), 'Degree Centrality')

from graphviz import Digraph
g = Digraph('G', filename='ll.txt')
g.view()

"""**Community Detection**"""

from networkx.algorithms.community import *

c = list(k_clique_communities(G,5))
list(c)

c = list(greedy_modularity_communities(G))
sorted(c)
print(len(c))

comp = girvan_newman(G)
print(len(c))
tuple(sorted(c) for c in next(comp))

import numpy as np
from sklearn.cluster import SpectralClustering
adj_mat = nx.to_numpy_matrix(G)
se = SpectralClustering(2, affinity = 'precomputed', n_init = 100)
se.fit(adj_mat)
print(len(c))
print (se.labels_)